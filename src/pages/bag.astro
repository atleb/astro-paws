---
import Layout from "../layouts/Layout.astro";
import SimpleTeaser from "../components/SimpleTeaser.astro";
import type { Props as SimpleTeaserProps } from "../components/SimpleTeaser.astro";
import ReadingListDisplay from "../components/ReadingListDisplay.astro";

export const prerender = true;

// Define a type for the expected structure of an article from the API
interface ApiArticle {
  id: string;
  title: { value: string };
  //image?: { // Image optional, but nested as well
  media?: { imageAsset: { id: string } };
  type: string; // To filter by article type
  // Add other fields if necessary for filtering or future use
}

// Function to filter valid articles and map them to SimpleTeaserProps
function processTeasers(items: any[]): SimpleTeaserProps[] {
  return items
    .filter(
      (item: any): item is ApiArticle =>
        item && item.type === "article" && typeof item.title?.value === "string"
    )
    .map((article: ApiArticle) => ({
      id: article.id,
      title: article.title.value,
      imageUuid: article.media?.imageAsset?.id || "", // Provide a fallback if image or uuid is missing
    }));
}

const baseUrl = "https://www.fvn.no/client-api/"; // bff api, for overview
const response = await fetch(`${baseUrl}collection/top/fvn/20`);

let teasers: SimpleTeaserProps[] = [];
if (response.ok) {
  const data = await response.json();
  teasers = processTeasers(data?.items || []);
} else {
  console.error(`Failed to fetch articles: ${response.status}`);
  // Optionally, set a message to display on the page or handle error appropriately
}

// Set cache control headers if needed, similar to index.astro
Astro.response.headers.set(
  "CDN-Cache-Control",
  "public, max-age=300, must-revalidate" // Example: 5 minutes, so 5 x 60 seconds
);
---

<Layout title="Reading Bag | FVN">
  <main>
    <h2>Bag it</h2>
    <div class="teaser-grid-container">
      {
        teasers.length > 0 ? (
          teasers.map((teaserProps) => <SimpleTeaser {...teaserProps} />)
        ) : (
          <p>No articles found or error fetching articles, see logs.</p>
        )
      }
    </div>
    <ReadingListDisplay />
  </main>
</Layout>

<style>
  main {
    margin: auto;
    padding: 1.5rem;
    max-width: 60ch; /* Default max-width */
  }

  .teaser-grid-container {
    display: block;
  }

  @media (min-width: 1200px) {
    /* Adjust breakpoint as needed */
    main {
      max-width: 120ch;
    }
    .teaser-grid-container {
      display: grid;
      grid-template-columns: repeat(2, 1fr); /* Two equal columns */
      gap: 1.5rem;
    }
  }

  h2 {
    font-size: 2rem;
    font-weight: 800;
    margin-bottom: 1rem; /* Added some margin below h2 */
  }
</style>
